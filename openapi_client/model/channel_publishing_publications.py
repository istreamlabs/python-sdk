"""
    iStreamPlanet Channels API

    This API provides a way to list, create, and run channels.  Channels consist of inputs (ingest), transcoding settings like codecs and bitrates, and outputs (publishing).  List calls use cursor-based pagination with [RFC 5988](https://tools.ietf.org/html/rfc5988) Link headers. Clients *should* read this header and follow the next link to read all pages of results.   # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Contact: support@istreamplanet.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.channel_publishing_dash import ChannelPublishingDash
    from openapi_client.model.channel_publishing_hls import ChannelPublishingHls
    from openapi_client.model.channel_publishing_publish_points import ChannelPublishingPublishPoints
    globals()['ChannelPublishingDash'] = ChannelPublishingDash
    globals()['ChannelPublishingHls'] = ChannelPublishingHls
    globals()['ChannelPublishingPublishPoints'] = ChannelPublishingPublishPoints


class ChannelPublishingPublications(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('drms',): {
            'WIDEVINE': "WIDEVINE",
            'FAIRPLAY': "FAIRPLAY",
            'PRIMETIME': "PRIMETIME",
            'PLAYREADY': "PLAYREADY",
        },
    }

    validations = {
        ('audio_encoder_ids',): {
        },
        ('drms',): {
        },
        ('dvr_window_secs',): {
            'inclusive_maximum': 36000,
            'exclusive_minimum''inclusive_minimum': 0,
        },
        ('iframe_only_encoder_ids',): {
        },
        ('publish_points',): {
            'min_items': 1,
        },
        ('thumbnail_encoder_ids',): {
        },
        ('video_encoder_ids',): {
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'audio_encoder_ids': ([str],),  # noqa: E501
            'create_vods': (bool,),  # noqa: E501
            'dash': (ChannelPublishingDash,),  # noqa: E501
            'drms': ([str],),  # noqa: E501
            'dvr_window_secs': (int,),  # noqa: E501
            'hls': (ChannelPublishingHls,),  # noqa: E501
            'iframe_only_encoder_ids': ([str],),  # noqa: E501
            'master_playlist_name': (str,),  # noqa: E501
            'packager_id': (str,),  # noqa: E501
            'publish_points': ([ChannelPublishingPublishPoints],),  # noqa: E501
            'redundant_publishing': (bool,),  # noqa: E501
            'thumbnail_encoder_ids': ([str],),  # noqa: E501
            'use_strict_bitrate': (bool,),  # noqa: E501
            'video_encoder_ids': ([str],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'audio_encoder_ids': 'audio_encoder_ids',  # noqa: E501
        'create_vods': 'create_vods',  # noqa: E501
        'dash': 'dash',  # noqa: E501
        'drms': 'drms',  # noqa: E501
        'dvr_window_secs': 'dvr_window_secs',  # noqa: E501
        'hls': 'hls',  # noqa: E501
        'iframe_only_encoder_ids': 'iframe_only_encoder_ids',  # noqa: E501
        'master_playlist_name': 'master_playlist_name',  # noqa: E501
        'packager_id': 'packager_id',  # noqa: E501
        'publish_points': 'publish_points',  # noqa: E501
        'redundant_publishing': 'redundant_publishing',  # noqa: E501
        'thumbnail_encoder_ids': 'thumbnail_encoder_ids',  # noqa: E501
        'use_strict_bitrate': 'use_strict_bitrate',  # noqa: E501
        'video_encoder_ids': 'video_encoder_ids',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """ChannelPublishingPublications - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            audio_encoder_ids ([str]): Optionally specify which audio encoders should be used for this publication. If none are specified, all audio encoders configured for the transcoder will be used.. [optional]  # noqa: E501
            create_vods (bool): Create VODs for all publish points in this publication. Note that Live2VOD must also be configured for the parent |Channel|.. [optional]  # noqa: E501
            dash (ChannelPublishingDash): [optional]  # noqa: E501
            drms ([str]): Optionally specify which DRMs to advertise in the playlist. If specified, this must be a subset of the DRMs specified by the packager associated with this publication. If omitted or empty, all DRMs specified by the packager will be advertised. This setting can only be used for HLS playlists.. [optional]  # noqa: E501
            dvr_window_secs (int): DVR window is the max sum(duration of media segments) that will be kept in a manifest at a given time in seconds. The max supported DVR window is 10 hours.. [optional]  # noqa: E501
            hls (ChannelPublishingHls): [optional]  # noqa: E501
            iframe_only_encoder_ids ([str]): List of video encoder IDs that should have I-Frame only playlists generated for them.. [optional]  # noqa: E501
            master_playlist_name (str): Optional master manifest name. When not supplied a default of 'master' will be used.. [optional]  # noqa: E501
            packager_id (str): Determines how segments in this publication are packaged. Must reference a packager in 'packaging.packagers'. However, if this is a playlist-only publication (i.e. contains publish points that specify 'playlist_only_for'), this must remain unset as the packager will be inferred from the publication this one is providing playlists for.. [optional]  # noqa: E501
            publish_points ([ChannelPublishingPublishPoints]): Publish points specify where to output.. [optional]  # noqa: E501
            redundant_publishing (bool): When redundant publishing is enabled succeeding to publish a given media segment to at least one HTTPPublishPoint in publish_points will result in that segment showing up in manifests as playable content. Will require at least two publish_points defined within the same publication.. [optional]  # noqa: E501
            thumbnail_encoder_ids ([str]): Optional: Specify what thumbnail_encoders should be in this Publication. [optional]  # noqa: E501
            use_strict_bitrate (bool): Optional, indicates whether we should pad the bitrate (false) or use what is explicitly provided (true). [optional]  # noqa: E501
            video_encoder_ids ([str]): Optionally specify which video encoders should be used for this publication. If none are specified, all video encoders configured for the transcoder will be used.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """ChannelPublishingPublications - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            audio_encoder_ids ([str]): Optionally specify which audio encoders should be used for this publication. If none are specified, all audio encoders configured for the transcoder will be used.. [optional]  # noqa: E501
            create_vods (bool): Create VODs for all publish points in this publication. Note that Live2VOD must also be configured for the parent |Channel|.. [optional]  # noqa: E501
            dash (ChannelPublishingDash): [optional]  # noqa: E501
            drms ([str]): Optionally specify which DRMs to advertise in the playlist. If specified, this must be a subset of the DRMs specified by the packager associated with this publication. If omitted or empty, all DRMs specified by the packager will be advertised. This setting can only be used for HLS playlists.. [optional]  # noqa: E501
            dvr_window_secs (int): DVR window is the max sum(duration of media segments) that will be kept in a manifest at a given time in seconds. The max supported DVR window is 10 hours.. [optional]  # noqa: E501
            hls (ChannelPublishingHls): [optional]  # noqa: E501
            iframe_only_encoder_ids ([str]): List of video encoder IDs that should have I-Frame only playlists generated for them.. [optional]  # noqa: E501
            master_playlist_name (str): Optional master manifest name. When not supplied a default of 'master' will be used.. [optional]  # noqa: E501
            packager_id (str): Determines how segments in this publication are packaged. Must reference a packager in 'packaging.packagers'. However, if this is a playlist-only publication (i.e. contains publish points that specify 'playlist_only_for'), this must remain unset as the packager will be inferred from the publication this one is providing playlists for.. [optional]  # noqa: E501
            publish_points ([ChannelPublishingPublishPoints]): Publish points specify where to output.. [optional]  # noqa: E501
            redundant_publishing (bool): When redundant publishing is enabled succeeding to publish a given media segment to at least one HTTPPublishPoint in publish_points will result in that segment showing up in manifests as playable content. Will require at least two publish_points defined within the same publication.. [optional]  # noqa: E501
            thumbnail_encoder_ids ([str]): Optional: Specify what thumbnail_encoders should be in this Publication. [optional]  # noqa: E501
            use_strict_bitrate (bool): Optional, indicates whether we should pad the bitrate (false) or use what is explicitly provided (true). [optional]  # noqa: E501
            video_encoder_ids ([str]): Optionally specify which video encoders should be used for this publication. If none are specified, all video encoders configured for the transcoder will be used.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
